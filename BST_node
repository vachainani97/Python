class BSTNode:
    def __init__(self, data, left, right):
        self.data = data
        self.left = left
        self.right = right

    def __eq__(self, other):
        if self.data == other.data:
            return True
        else:
            return False

class BST:
    def __init__(self, root):
        self.root = root

    def is_empty(self):
        return self.root is None

    def insert(self, data):
        if self.is_empty():
            self.root = BSTNode(data, None, None)
            return
        insert = self.root
        while True:
            if data > insert.data:
                if insert.right is not None:
                    insert = insert.right
                else:
                    insert.right = BSTNode(data, None, None)
                    return
            elif data < insert.data:
                if insert.left is not None:
                    insert = insert.left
                else:
                    insert.left = BSTNode(data, None, None)
                    return
            else:
                return

    def contains(self, data):
        temp = self.root
        while temp is not None:
            if temp.data == data:
                return True
            if temp.data > data:
                temp = temp.left    
            else:
                temp = temp.right
        return False

    def preorder(self):
        if self.root is not None:
            self._preorder(self.root)
    def _preorder(self, node):
        if node is None:
            return
        print(node.data, end=" ")
        self._preorder(node.left)
        self._preorder(node.right)

    def inorder(self):
        if self.root is not None:
            self._inorder(self.root)
    def _inorder(self, node):
        if node is None:
            return
        self._inorder(node.left)
        print(node.data, end=" ")
        self._inorder(node.right)        

    def postorder(self):
        if self.root is not None:
            self._postorder(self.root)
    def _postorder(self, node):
        if node is None:
            return
        self._postorder(node.left)
        self._postorder(node.right)
        print(node.data, end=" ")

    def mirror(self):
        if self.root is not None:
            self._mirror(self.root)
    def _mirror(self, node):
        if node is None:
            return
        temp = node.right
        node.right = node.left
        node.left = temp
        self._mirror(node.left)
        self._mirror(node.right)


def main():
    tree = BST(None)
    tree.insert(10)
    # tree.insert(6)
    # tree.insert(15)
    # tree.insert(2)
    # tree.insert(16)
    # tree.insert(20)

    tree.mirror()
    tree.inorder()


    
    
main()
